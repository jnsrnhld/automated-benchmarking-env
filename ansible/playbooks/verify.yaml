---
- name: Check the status of the created MongoDB database
  hosts: leader
  vars_files:
    - ../vars.yaml
  become: yes
  become_user: "{{ mtuser }}"
  tasks:
    - name: "Check {{ mongodb_database }} db status"
      kubernetes.core.k8s_exec:
        namespace: "{{ k8s_namespace }}"
        pod: mongodb-0
        command: "mongosh -u {{ mongodb_username }} -p \"{{ mongodb_password }}\" --authenticationDatabase {{ mongodb_database }} --eval \"db.stats().ok\""
      register: db_status

    - name: "Check if DB status of {{ mongodb_database }} is 'ok'"
      debug:
        msg: "DB status not OK {{ db_status.stdout }}"
      failed_when: db_status.stdout | int != 1

- name: Template test files to leader
  hosts: leader
  vars_files:
    - ../vars.yaml
  become: yes
  become_user: "{{ mtuser }}"
  tasks:
    - name: Create a temporary directory for templating
      file:
        path: "/tmp/charts"
        state: directory
        mode: '0755'

    - name: Template the Zookeeper cluster file
      template:
        src: "{{ lookup('env', 'PWD') }}/ansible/charts/spark-pi.yaml"
        dest: /tmp/charts/spark-pi.yaml

    - name: Copy webhdfs.yaml to leader
      template:
        src: "{{ lookup('env', 'PWD') }}/ansible/charts/webhdfs.yaml"
        dest: /tmp/charts/webhdfs.yaml

- name: Deploy a test Spark application to the k8s cluster
  hosts: leader
  vars_files:
    - ../vars.yaml
  become: yes
  tasks:
    - name: Deploy spark-pi application
      kubernetes.core.k8s:
        name: spark-pi
        src: /tmp/charts/spark-pi.yaml
        namespace: "{{ k8s_namespace }}"
        state: present

    - name: Wait for SparkApplication pod to be terminated
      shell: "kubectl wait --namespace={{ k8s_namespace }} --for=jsonpath='{.status.phase}'=Succeeded pod/spark-pi-driver --timeout=120s"
      retries: 3

    - name: Delete SparkApplication pod
      kubernetes.core.k8s:
        name: spark-pi
        src: /tmp/charts/spark-pi.yaml
        namespace: "{{ k8s_namespace }}"
        state: absent

- name: Test HDFS Cluster with WebHDFS
  hosts: leader
  vars_files:
    - ../vars.yaml
  become: yes
  become_user: "{{ mtuser }}"
  tasks:
    - name: Deploy WebHDFS application
      kubernetes.core.k8s:
        name: webhdfs
        src:  /tmp/charts/webhdfs.yaml
        namespace: "{{ k8s_namespace }}"
        state: present
        wait: true

    - name: Verify cluster is empty
      kubernetes.core.k8s_exec:
        namespace: "{{ k8s_namespace }}"
        pod: webhdfs-0
        command: "curl -s -XGET \"http://{{ hdfs_cluster_name }}-namenode-default-0.{{ hdfs_cluster_name }}-namenode-default.default.svc.cluster.local:9870/webhdfs/v1/?op=LISTSTATUS\""
      register: curl_result

    - name: Check if FileStatus array is not empty
      debug:
        msg: "FileStatus array is not empty"
      when: curl_result.stdout | from_json() | json_query('FileStatuses.FileStatus') | length > 0

    - name: Create testdata.txt file locally
      copy:
        dest: /tmp/testdata.txt
        content: |
          Sample test data for HDFS.
        mode: '0644'

    - name: Copy /tmp/testdata.txt local file to /tmp/testdata.txt in pod
      kubernetes.core.k8s_cp:
        namespace: "{{ k8s_namespace }}"
        pod: webhdfs-0
        remote_path: /tmp/testdata.txt
        local_path: /tmp/testdata.txt

    - name: Issue initial PUT command to create file in HDFS
      kubernetes.core.k8s_exec:
        namespace: "{{ k8s_namespace }}"
        pod: webhdfs-0
        command: "curl -s -XPUT -T /tmp/testdata.txt \"http://{{ hdfs_cluster_name }}-namenode-default-0.{{ hdfs_cluster_name }}-namenode-default.default.svc.cluster.local:9870/webhdfs/v1/testdata.txt?user.name=stackable&op=CREATE&noredirect=true\""
      register: put_result

    - name: Extract location URL from PUT response
      set_fact:
        location_url: "{{ put_result.stdout | from_json() | json_query('Location') }}"

    - name: Issue second PUT command to complete file creation
      kubernetes.core.k8s_exec:
        namespace: "{{ k8s_namespace }}"
        pod: webhdfs-0
        command: curl -s -XPUT -T /tmp/testdata.txt "{{ location_url }}"

    - name: Recheck status to verify file creation
      kubernetes.core.k8s_exec:
        namespace: "{{ k8s_namespace }}"
        pod: webhdfs-0
        command: "curl -s -XGET \"http://{{ hdfs_cluster_name }}-namenode-default-0.{{ hdfs_cluster_name }}-namenode-default.default.svc.cluster.local:9870/webhdfs/v1/?op=LISTSTATUS\""
      register: status_result

    - name: Parse status_result stdout as JSON
      set_fact:
        file_status: "{{ status_result.stdout | from_json }}"

    - name: Verify the file_status contains the created file
      assert:
        that:
          - file_status.FileStatuses.FileStatus | length > 0
          - file_status.FileStatuses.FileStatus[0].pathSuffix == "testdata.txt"
          - file_status.FileStatuses.FileStatus[0].length > 0

    - name: Delete the testdata.txt file from HDFS
      kubernetes.core.k8s_exec:
        namespace: "{{ k8s_namespace }}"
        pod: webhdfs-0
        command: "curl -s -XDELETE \"http://{{ hdfs_cluster_name }}-namenode-default-0.{{ hdfs_cluster_name }}-namenode-default.default.svc.cluster.local:9870/webhdfs/v1/testdata.txt?user.name=stackable&op=DELETE\""

    - name: Clean up local testdata.txt file
      file:
        path: /tmp/testdata.txt
        state: absent

    - name: Delete WebHDFS application
      kubernetes.core.k8s:
        name: webhdfs
        src: /tmp/charts/webhdfs.yaml
        namespace: "{{ k8s_namespace }}"
        state: absent
        wait: true
